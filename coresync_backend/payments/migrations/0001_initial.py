# Generated by Django 5.0.2 on 2025-09-25 10:30

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('memberships', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='QuickBooksSync',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sync_type', models.CharField(choices=[('payment', 'Payment Sync'), ('customer', 'Customer Sync'), ('service', 'Service Sync'), ('invoice', 'Invoice Sync')], max_length=20)),
                ('object_id', models.CharField(max_length=255)),
                ('quickbooks_id', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('skipped', 'Skipped')], default='pending', max_length=20)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('max_attempts', models.PositiveIntegerField(default=3)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('next_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('sync_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'verbose_name': 'QuickBooks Sync',
                'verbose_name_plural': 'QuickBooks Syncs',
                'db_table': 'quickbooks_sync',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StripeWebhookEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_event_id', models.CharField(max_length=255, unique=True)),
                ('event_type', models.CharField(max_length=100)),
                ('event_data', models.JSONField()),
                ('processed', models.BooleanField(default=False)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Stripe Webhook Event',
                'verbose_name_plural': 'Stripe Webhook Events',
                'db_table': 'stripe_webhook_events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('payment_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('payment_type', models.CharField(choices=[('service', 'Service Payment'), ('membership', 'Membership Payment'), ('addon', 'Add-on Payment'), ('product', 'Product Purchase'), ('refund', 'Refund')], max_length=20)),
                ('payment_method', models.CharField(choices=[('stripe_card', 'Credit/Debit Card'), ('stripe_apple_pay', 'Apple Pay'), ('stripe_google_pay', 'Google Pay'), ('cash', 'Cash'), ('check', 'Check'), ('other', 'Other')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=255)),
                ('stripe_charge_id', models.CharField(blank=True, max_length=255)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255)),
                ('quickbooks_payment_id', models.CharField(blank=True, max_length=255)),
                ('quickbooks_synced', models.BooleanField(default=False)),
                ('quickbooks_sync_error', models.TextField(blank=True)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('notes', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('refund_reason', models.CharField(blank=True, max_length=255)),
                ('membership', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='memberships.membership')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payments',
                'ordering': ['-created_at'],
            },
        ),
    ]
