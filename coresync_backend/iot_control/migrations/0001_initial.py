# Generated by Django 5.0.2 on 2025-10-08 09:10

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ControlLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('manual', 'Manual Control'), ('scene', 'Scene Activation'), ('automatic', 'Automatic Control'), ('emergency', 'Emergency Action')], max_length=20)),
                ('action_description', models.CharField(max_length=255)),
                ('previous_state', models.JSONField(blank=True, default=dict)),
                ('new_state', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Control Log',
                'verbose_name_plural': 'Control Logs',
                'db_table': 'control_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='IoTDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('device_type', models.CharField(choices=[('lighting', 'Lighting System'), ('scent', 'Scent Diffuser'), ('temperature', 'Temperature Control'), ('music', 'Music System'), ('massage', 'Massage Equipment'), ('sauna', 'Sauna Control'), ('jacuzzi', 'Jacuzzi Control'), ('mirror', 'Smart Mirror'), ('security', 'Security System')], max_length=20)),
                ('location', models.CharField(choices=[('mensuite_main', 'Mensuite - Main Area'), ('mensuite_meditation', 'Mensuite - Meditation Room'), ('mensuite_barber', 'Mensuite - Barber Area'), ('mensuite_laser', 'Mensuite - Laser Treatment'), ('coresync_suite', 'Coresync Private - Main Suite'), ('coresync_sauna', 'Coresync Private - Sauna'), ('coresync_jacuzzi', 'Coresync Private - Jacuzzi'), ('coresync_outdoor', 'Coresync Private - Outdoor Area'), ('common_lobby', 'Common - Lobby'), ('common_reception', 'Common - Reception')], max_length=30)),
                ('device_id', models.CharField(max_length=100, unique=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('model', models.CharField(blank=True, max_length=100)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('mac_address', models.CharField(blank=True, max_length=17)),
                ('current_status', models.JSONField(blank=True, default=dict)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_online', models.BooleanField(default=False)),
                ('min_value', models.FloatField(default=0)),
                ('max_value', models.FloatField(default=100)),
                ('default_value', models.FloatField(default=50)),
                ('api_key', models.CharField(blank=True, max_length=255)),
                ('requires_authentication', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'IoT Device',
                'verbose_name_plural': 'IoT Devices',
                'db_table': 'iot_devices',
                'ordering': ['location', 'device_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Scene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('scene_type', models.CharField(choices=[('preset', 'Preset Scene'), ('custom', 'Custom User Scene'), ('automatic', 'Automatic Scene')], max_length=20)),
                ('location', models.CharField(blank=True, choices=[('mensuite_main', 'Mensuite - Main Area'), ('mensuite_meditation', 'Mensuite - Meditation Room'), ('mensuite_barber', 'Mensuite - Barber Area'), ('mensuite_laser', 'Mensuite - Laser Treatment'), ('coresync_suite', 'Coresync Private - Main Suite'), ('coresync_sauna', 'Coresync Private - Sauna'), ('coresync_jacuzzi', 'Coresync Private - Jacuzzi'), ('coresync_outdoor', 'Coresync Private - Outdoor Area'), ('common_lobby', 'Common - Lobby'), ('common_reception', 'Common - Reception')], help_text='Restrict scene to specific location', max_length=30)),
                ('device_settings', models.JSONField(default=dict, help_text='Settings for each device in the scene')),
                ('is_public', models.BooleanField(default=False, help_text='Allow other users to see and use this scene')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('auto_activate_time', models.TimeField(blank=True, null=True)),
                ('auto_deactivate_time', models.TimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Scene',
                'verbose_name_plural': 'Scenes',
                'db_table': 'scenes',
                'ordering': ['scene_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reading_type', models.CharField(help_text='Type of sensor reading (temperature, humidity, etc.)', max_length=50)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('quality_score', models.FloatField(default=1.0, help_text='Reading quality from 0.0 to 1.0', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
            ],
            options={
                'verbose_name': 'Sensor Reading',
                'verbose_name_plural': 'Sensor Readings',
                'db_table': 'sensor_readings',
                'ordering': ['-timestamp'],
            },
        ),
    ]
