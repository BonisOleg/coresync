# Generated by Django 5.0.2 on 2025-10-08 09:10

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('payments', '0002_initial'),
        ('services', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('quantity', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at time of order', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_price', models.DecimalField(decimal_places=2, help_text='unit_price * quantity', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('notes', models.CharField(blank=True, help_text='Special requests for this item', max_length=255)),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'db_table': 'order_items',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('category', models.CharField(choices=[('skincare', 'Skincare'), ('wellness', 'Wellness Tech'), ('accessories', 'Accessories'), ('supplements', 'Supplements')], max_length=20)),
                ('description', models.TextField()),
                ('short_description', models.CharField(max_length=300)),
                ('price', models.DecimalField(decimal_places=2, help_text='Regular price for non-members', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('member_price', models.DecimalField(decimal_places=2, help_text='Discounted price for members', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('member_discount_percent', models.PositiveIntegerField(default=10, help_text='Discount percentage (for display)')),
                ('stock', models.IntegerField(default=0, help_text='Current stock quantity', validators=[django.core.validators.MinValueValidator(0)])),
                ('low_stock_threshold', models.IntegerField(default=5, help_text='Alert when stock falls below this', validators=[django.core.validators.MinValueValidator(0)])),
                ('main_image', models.ImageField(blank=True, help_text='Primary product image', upload_to='products/')),
                ('gallery_images', models.JSONField(blank=True, default=list, help_text='Additional product images (list of URLs)')),
                ('is_featured', models.BooleanField(default=False, help_text='Show on featured products section')),
                ('quickbooks_item_id', models.CharField(blank=True, help_text='QuickBooks item ID for sync', max_length=100)),
                ('quickbooks_synced', models.BooleanField(default=False)),
                ('meta_title', models.CharField(blank=True, max_length=200)),
                ('meta_description', models.CharField(blank=True, max_length=300)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'shop_products',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PickupOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order_number', models.CharField(editable=False, help_text='Format: PO-YYYY-NNNNNN', max_length=20, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('ready', 'Ready for Pickup'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('pickup_date', models.DateField(blank=True, help_text='Scheduled pickup date', null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total', models.DecimalField(decimal_places=2, default=0, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('customer_notes', models.TextField(blank=True, help_text='Customer instructions or requests')),
                ('staff_notes', models.TextField(blank=True, help_text='Internal staff notes')),
                ('quickbooks_synced', models.BooleanField(default=False)),
                ('quickbooks_invoice_id', models.CharField(blank=True, max_length=100)),
                ('quickbooks_sync_error', models.TextField(blank=True)),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pickup_orders', to='payments.payment')),
                ('pickup_booking', models.ForeignKey(blank=True, help_text='Link to spa booking for pickup', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pickup_orders', to='services.booking')),
            ],
            options={
                'verbose_name': 'Pickup Order',
                'verbose_name_plural': 'Pickup Orders',
                'db_table': 'pickup_orders',
                'ordering': ['-created_at'],
            },
        ),
    ]
