"""
AI Assistant Service - –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª—ñ–≤.
–ü—Ä–∞—Ü—é—î –∑ Atlas, Website Chat, Mobile App, API.

–ú–æ–¥—É–ª—å–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: –ø—Ä–∞—Ü—é—î –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞ –∑–∞–ø–∏—Ç—É.
"""
import logging
import json
from typing import Dict, Any, Optional, List
from datetime import datetime
from decimal import Decimal

from .booking_orchestrator import BookingOrchestrator
from .intent_classifier import IntentClassifier
from .context_manager import ContextManager

logger = logging.getLogger(__name__)


class AssistantService:
    """
    –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π AI –∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è CoreSync.
    
    –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
    1. –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ –≤—ñ–¥ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª (Atlas, Web, Mobile)
    2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑ –æ–ø–ª–∞—Ç–æ—é
    3. FAQ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏
    4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
    5. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü—ñ–Ω (–∑ membership –∑–Ω–∏–∂–∫–∞–º–∏)
    6. –ó–±—ñ—Ä –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –¥–ª—è newsletters
    """
    
    def __init__(self):
        self.booking_orchestrator = BookingOrchestrator()
        self.intent_classifier = IntentClassifier()
        self.context_manager = ContextManager()
        self.response_templates = self._load_templates()
    
    def _load_templates(self) -> Dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —à–∞–±–ª–æ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π."""
        try:
            import os
            from django.conf import settings
            
            templates_path = os.path.join(
                settings.BASE_DIR, 
                'ai_agent', 
                'response_templates.json'
            )
            
            with open(templates_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        except Exception as e:
            logger.error(f"Error loading templates: {str(e)}")
            return {}
    
    async def process_message(
        self,
        message: str,
        session_id: str,
        user_id: Optional[int] = None,
        source: str = 'web',  # 'web', 'mobile', 'atlas_phone', 'atlas_sms'
        context: Optional[Dict] = None
    ) -> Dict[str, Any]:
        """
        –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        
        Args:
            message: –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            session_id: ID —Å–µ—Å—ñ—ó —Ä–æ–∑–º–æ–≤–∏
            user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—è–∫—â–æ —î)
            source: –î–∂–µ—Ä–µ–ª–æ –∑–∞–ø–∏—Ç—É
            context: –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Returns:
            Dict: {
                'response': str,  # –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                'actions': List[Dict],  # –î—ñ—ó (–ø–æ–∫–∞–∑–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º–∏, —Ç–æ—â–æ)
                'metadata': Dict,  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–∞
                'requires_payment': bool,
                'booking_data': Dict (—è–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è)
            }
        """
        try:
            # –ö–ª–∞—Å–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞–º—ñ—Ä (intent)
            intent = await self.intent_classifier.classify(message, context)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏
            conversation_context = await self.context_manager.update_context(
                session_id=session_id,
                user_message=message,
                detected_intent=intent
            )
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –Ω–∞–º—ñ—Ä—É
            if intent['type'] == 'booking':
                return await self._handle_booking_intent(
                    message, session_id, user_id, intent, conversation_context
                )
            
            elif intent['type'] == 'pricing':
                return await self._handle_pricing_request(
                    message, user_id, intent, conversation_context
                )
            
            elif intent['type'] == 'availability':
                return await self._handle_availability_check(
                    message, intent, conversation_context
                )
            
            elif intent['type'] == 'service_info':
                return await self._handle_service_info(
                    message, intent
                )
            
            elif intent['type'] == 'membership':
                return await self._handle_membership_info(
                    message, user_id
                )
            
            elif intent['type'] == 'cancellation':
                return await self._handle_cancellation(
                    message, session_id, user_id
                )
            
            elif intent['type'] == 'help':
                return self._get_help_response()
            
            elif intent['type'] == 'greeting':
                return self._get_greeting_response()
            
            else:
                return self._get_fallback_response(message)
        
        except Exception as e:
            logger.error(f"Error processing message: {str(e)}")
            return self._get_error_response()
    
    async def _handle_booking_intent(
        self,
        message: str,
        session_id: str,
        user_id: Optional[int],
        intent: Dict,
        context: Dict
    ) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞–º—ñ—Ä –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏."""
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        required_data = ['service_id', 'date', 'time']
        missing_data = [d for d in required_data if d not in context]
        
        if missing_data:
            # –ó–±–∏—Ä–∞—î–º–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –¥–∞–Ω—ñ
            return await self._collect_booking_data(missing_data[0], context)
        
        # –í—Å—ñ –¥–∞–Ω—ñ —î - —Å—Ç–≤–æ—Ä—é—î–º–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
        try:
            # –§–æ—Ä–º—É—î–º–æ datetime
            booking_datetime = datetime.combine(
                context['date'],
                context['time']
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ orchestrator
            booking_result = await self.booking_orchestrator.create_booking(
                service_id=context['service_id'],
                user_id=user_id,
                booking_datetime=booking_datetime,
                addons=context.get('addons', []),
                special_requests=context.get('special_requests'),
                conversation_session_id=session_id
            )
            
            # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response_text = f"""
‚úÖ **–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ!**

üìã –†–µ—Ñ–µ—Ä–µ–Ω—Å: {booking_result['booking_reference']}
üí∞ –î–æ –æ–ø–ª–∞—Ç–∏: ${booking_result['total_price']} USD
üë§ –ú–∞–π—Å—Ç–µ—Ä: {booking_result.get('technician', '–ë—É–¥–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ')}

–ó–∞—Ä–∞–∑ –ø–µ—Ä–µ–π–¥–µ–º–æ –¥–æ –æ–ø–ª–∞—Ç–∏...
"""
            
            return {
                'response': response_text,
                'actions': [
                    {
                        'type': 'payment_required',
                        'booking_id': booking_result['booking_id'],
                        'amount': booking_result['total_price']
                    },
                    {
                        'type': 'show_payment_form',
                        'stripe_publishable_key': self._get_stripe_key()
                    }
                ],
                'metadata': {
                    'booking_id': booking_result['booking_id'],
                    'status': booking_result['status']
                },
                'requires_payment': True,
                'booking_data': booking_result
            }
        
        except Exception as e:
            logger.error(f"Booking creation failed: {str(e)}")
            return {
                'response': f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è: {str(e)}",
                'actions': [],
                'metadata': {'error': str(e)},
                'requires_payment': False
            }
    
    async def _collect_booking_data(
        self,
        missing_field: str,
        current_context: Dict
    ) -> Dict[str, Any]:
        """–ó–±–∏—Ä–∞—î –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
        
        if missing_field == 'service_id':
            return {
                'response': self.response_templates['booking_intent']['responses'][0],
                'actions': [
                    {
                        'type': 'show_service_options',
                        'options': self.response_templates['booking_intent']['options']
                    }
                ],
                'metadata': {'awaiting': 'service_selection'},
                'requires_payment': False
            }
        
        elif missing_field == 'date':
            return {
                'response': "–ù–∞ —è–∫—É –¥–∞—Ç—É –±–∞–∂–∞—î—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏?",
                'actions': [
                    {
                        'type': 'show_calendar',
                        'min_date': self._get_min_booking_date(),
                        'max_date': self._get_max_booking_date()
                    }
                ],
                'metadata': {'awaiting': 'date_selection'},
                'requires_payment': False
            }
        
        elif missing_field == 'time':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å
            availability = await self.booking_orchestrator.check_availability(
                service_id=current_context['service_id'],
                preferred_date=current_context['date'],
                duration_minutes=60  # Default
            )
            
            return {
                'response': "–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —á–∞—Å:",
                'actions': [
                    {
                        'type': 'show_time_slots',
                        'available_slots': [
                            slot.strftime('%H:%M') 
                            for slot in availability['suggested_slots']
                        ]
                    }
                ],
                'metadata': {'awaiting': 'time_selection'},
                'requires_payment': False
            }
        
        return self._get_fallback_response("")
    
    async def _handle_pricing_request(
        self,
        message: str,
        user_id: Optional[int],
        intent: Dict,
        context: Dict
    ) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –ø—Ä–æ —Ü—ñ–Ω–∏."""
        
        service_type = intent.get('service_type')
        
        if not service_type:
            # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ —è–∫–∏–π —Å–µ—Ä–≤—ñ—Å
            return {
                'response': self.response_templates['pricing_request']['responses'][0],
                'actions': [
                    {
                        'type': 'show_service_categories',
                        'categories': ['massage', 'facial', 'barber', 'mani_pedi', 'private']
                    }
                ],
                'metadata': {'awaiting': 'service_type_for_pricing'},
                'requires_payment': False
            }
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ü—ñ–Ω–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
        pricing = await self._get_service_pricing(service_type, user_id)
        
        response_text = f"""
üí∞ **–¶—ñ–Ω–∏ –Ω–∞ {service_type}:**

{pricing['formatted_text']}

{pricing['membership_note']}
"""
        
        return {
            'response': response_text,
            'actions': [
                {
                    'type': 'suggest_booking',
                    'service_type': service_type
                }
            ],
            'metadata': {'pricing_shown': True},
            'requires_payment': False
        }
    
    async def _handle_availability_check(
        self,
        message: str,
        intent: Dict,
        context: Dict
    ) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å."""
        
        # –ü–∞—Ä—Å–∏–º–æ –¥–∞—Ç—É –∑ message –∞–±–æ context
        service_id = context.get('service_id') or intent.get('service_id')
        preferred_date = context.get('date') or intent.get('date')
        
        if not service_id or not preferred_date:
            return {
                'response': "–î–ª—è —è–∫–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É —Ç–∞ –Ω–∞ —è–∫—É –¥–∞—Ç—É —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å?",
                'actions': [],
                'metadata': {},
                'requires_payment': False
            }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–µ—Ä–µ–∑ orchestrator
        availability = await self.booking_orchestrator.check_availability(
            service_id=service_id,
            preferred_date=preferred_date,
            duration_minutes=60
        )
        
        if availability['available']:
            response_text = f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ {preferred_date.strftime('%d.%m.%Y')}!"
        else:
            response_text = f"‚ùå –ù–∞ –∂–∞–ª—å, –∑–∞–π–Ω—è—Ç–æ. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å–ª–æ—Ç–∏:"
        
        return {
            'response': response_text,
            'actions': [
                {
                    'type': 'show_available_slots',
                    'slots': [
                        slot.strftime('%d.%m.%Y %H:%M')
                        for slot in availability['suggested_slots']
                    ]
                }
            ],
            'metadata': {'availability_checked': True},
            'requires_payment': False
        }
    
    async def _handle_service_info(
        self,
        message: str,
        intent: Dict
    ) -> Dict[str, Any]:
        """–ù–∞–¥–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å–∏."""
        
        service_type = intent.get('service_type', 'general')
        
        templates = self.response_templates.get('service_info', {})
        info_text = templates.get(service_type, templates.get('massage', ''))
        
        return {
            'response': info_text,
            'actions': [
                {
                    'type': 'suggest_booking',
                    'service_type': service_type
                }
            ],
            'metadata': {'info_provided': service_type},
            'requires_payment': False
        }
    
    async def _handle_membership_info(
        self,
        message: str,
        user_id: Optional[int]
    ) -> Dict[str, Any]:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ membership."""
        
        response_text = self.response_templates['membership']['responses'][0]
        
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π, –¥–æ–¥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É —ñ–Ω—Ñ—É
        if user_id:
            from memberships.models import Membership
            from asgiref.sync import sync_to_async
            
            membership = await sync_to_async(
                lambda: Membership.objects.filter(
                    user_id=user_id, 
                    status='active'
                ).first()
            )()
            
            if membership:
                response_text += f"\n\n‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞—Ä–∏—Ñ: **{membership.tier.upper()}**"
        
        return {
            'response': response_text,
            'actions': [
                {
                    'type': 'show_membership_comparison',
                    'tiers': ['base', 'premium', 'unlimited']
                }
            ],
            'metadata': {'membership_info_shown': True},
            'requires_payment': False
        }
    
    async def _handle_cancellation(
        self,
        message: str,
        session_id: str,
        user_id: Optional[int]
    ) -> Dict[str, Any]:
        """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è."""
        
        if not user_id:
            return {
                'response': "–î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.",
                'actions': [{'type': 'show_login_form'}],
                'metadata': {},
                'requires_payment': False
            }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        from services.models import Booking
        from asgiref.sync import sync_to_async
        
        bookings = await sync_to_async(
            lambda: list(Booking.objects.filter(
                user_id=user_id,
                status__in=['confirmed', 'pending']
            ).order_by('-booking_date'))
        )()
        
        if not bookings:
            return {
                'response': "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.",
                'actions': [],
                'metadata': {},
                'requires_payment': False
            }
        
        return {
            'response': "–û–±–µ—Ä—ñ—Ç—å –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:",
            'actions': [
                {
                    'type': 'show_booking_list',
                    'bookings': [
                        {
                            'id': b.id,
                            'service': b.service.name,
                            'date': b.booking_date.strftime('%d.%m.%Y'),
                            'time': b.booking_time.strftime('%H:%M')
                        }
                        for b in bookings
                    ]
                }
            ],
            'metadata': {'cancellation_mode': True},
            'requires_payment': False
        }
    
    def _get_greeting_response(self) -> Dict[str, Any]:
        """–í—ñ—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
        import random
        
        responses = self.response_templates.get('greeting', {}).get('responses', [])
        follow_up = self.response_templates.get('greeting', {}).get('follow_up', '')
        
        response = random.choice(responses) if responses else "–í—ñ—Ç–∞—é!"
        
        return {
            'response': f"{response}\n\n{follow_up}",
            'actions': [
                {
                    'type': 'show_quick_actions',
                    'actions': [
                        '–ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏',
                        '–¶—ñ–Ω–∏',
                        'Membership',
                        '–ö–æ–Ω—Ç–∞–∫—Ç–∏'
                    ]
                }
            ],
            'metadata': {'greeting': True},
            'requires_payment': False
        }
    
    def _get_help_response(self) -> Dict[str, Any]:
        """–î–æ–ø–æ–º–æ–≥–∞."""
        response = self.response_templates.get('help', {}).get('responses', [''])[0]
        
        return {
            'response': response,
            'actions': [],
            'metadata': {'help_shown': True},
            'requires_payment': False
        }
    
    def _get_fallback_response(self, message: str) -> Dict[str, Any]:
        """Fallback –∫–æ–ª–∏ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–∏."""
        import random
        
        responses = self.response_templates.get('fallback', {}).get('responses', [])
        suggestions = self.response_templates.get('fallback', {}).get('suggestions', [])
        
        response = random.choice(responses) if responses else "–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç."
        suggestion = random.choice(suggestions) if suggestions else ""
        
        return {
            'response': f"{response}\n\n{suggestion}",
            'actions': [
                {
                    'type': 'show_suggestions',
                    'suggestions': ['–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è', '–¶—ñ–Ω–∏', '–°–µ—Ä–≤—ñ—Å–∏']
                }
            ],
            'metadata': {'fallback': True},
            'requires_payment': False
        }
    
    def _get_error_response(self) -> Dict[str, Any]:
        """–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ."""
        import random
        
        responses = self.response_templates.get('error', {}).get('responses', [])
        response = random.choice(responses) if responses else "–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞."
        
        return {
            'response': response,
            'actions': [],
            'metadata': {'error': True},
            'requires_payment': False
        }
    
    async def _get_service_pricing(
        self,
        service_type: str,
        user_id: Optional[int]
    ) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î —Ü—ñ–Ω–∏ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É."""
        # TODO: –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑ –ë–î
        
        # Placeholder
        pricing_text = f"–¶—ñ–Ω–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ membership. –ë–∞–∑–æ–≤–∞ —Ü—ñ–Ω–∞: $150-300."
        membership_note = "üí° –ó membership –∑–Ω–∏–∂–∫–∞ –¥–æ 40%!"
        
        return {
            'formatted_text': pricing_text,
            'membership_note': membership_note
        }
    
    def _get_min_booking_date(self) -> str:
        """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–∞—Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (—Å—å–æ–≥–æ–¥–Ω—ñ)."""
        from django.utils import timezone
        return timezone.now().date().isoformat()
    
    def _get_max_booking_date(self) -> str:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–∞—Ç–∞ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è (3 –¥–Ω—ñ –¥–ª—è non-members)."""
        from django.utils import timezone
        from datetime import timedelta
        
        # Default: 90 –¥–Ω—ñ–≤ (–º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ membership)
        return (timezone.now().date() + timedelta(days=90)).isoformat()
    
    def _get_stripe_key(self) -> str:
        """–û—Ç—Ä–∏–º—É—î Stripe publishable key."""
        from django.conf import settings
        return getattr(settings, 'STRIPE_PUBLISHABLE_KEY', '')


# Global instance
assistant_service = AssistantService()

